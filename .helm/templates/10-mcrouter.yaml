{{- $count := (pluck .Values.global.env .Values.memcached.replicas | first | default .Values.memcached.replicas._default | int) -}}
{{- $pools := dict -}}
{{- $servers := list -}}
{{- /* Заполняем  массив двумя копиями серверов: "0 1 2 0 1 2" */ -}}
{{- range until 2 -}}
  {{- range $i, $_ := until $count -}}
    {{- $servers = append $servers (printf "mc-%d.mc:11211" $i) -}}
  {{- end -}}
{{- end -}}
{{- /* Смещаясь по массиву получаем N срезов: "[0 1 2] [1 2 0] [2 0 1]" */ -}}
{{- range $i, $_ := until $count -}}
  {{- $pool := dict "servers" (slice $servers $i (add $i $count)) -}}
  {{- $_ := set $pools (printf "MissFailoverRoute|Pool|pool%02d" $i) $pool -}}
{{- end -}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcrouter
data:
  config.json: |
    {
      "pools": {{- $pools | toJson | replace "MissFailoverRoute|Pool|" "" -}},
      "route": {
        "type": "OperationSelectorRoute",
        "default_policy": "AllMajorityRoute|Pool|pool00",
        "operation_policies": {
          "get": {
            "type": "RandomRoute",
            "children": {{- keys $pools | toJson }}
          }
        }
      }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: mcrouter
spec:
  selector:
    app: mcrouter
  clusterIP: None
  ports:
  - name: mcrouter
    port: 11211
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: mcrouter
  labels:
    app: mcrouter
spec:
  serviceName: mcrouter
  replicas: {{ pluck .Values.global.env .Values.mcrouter.replicas | first | default .Values.mcrouter.replicas._default }}
  template:
    metadata:
      labels:
        app: mcrouter
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: mcrouter
      imagePullSecrets:
      - name: {{ required ".Values.registry.secret_name" .Values.registry.secret_name }}
      volumes:
      - name: mcrouter
        configMap:
          name: mcrouter
      containers:
      - name: mcrouter
{{ tuple "mcrouter" . | include "werf_container_image" | indent 8 }}
        command:
        - mcrouter
        args:
        - -p 11211
        - --config-file=/etc/mcrouter/config.json
        securityContext:
          runAsUser: 1000
        ports:
        - name: mcrouter
          containerPort: 11211
        livenessProbe:
          tcpSocket:
            port: mcrouter
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: mcrouter
          initialDelaySeconds: 5
          timeoutSeconds: 1
        volumeMounts:
        - name: mcrouter
          mountPath: /etc/mcrouter/config.json
          subPath: config.json
        resources:
          requests:
            cpu: {{ pluck .Values.global.env .Values.resources.mcrouter.requests.cpu | first | default .Values.resources.mcrouter.requests.cpu._default }}
            memory: {{ pluck .Values.global.env .Values.resources.mcrouter.requests.memory | first | default .Values.resources.mcrouter.requests.memory._default }}
          limits:
            cpu: {{ pluck .Values.global.env .Values.resources.mcrouter.limits.cpu | first | default .Values.resources.mcrouter.limits.cpu._default }}
            memory: {{ pluck .Values.global.env .Values.resources.mcrouter.limits.memory | first | default .Values.resources.mcrouter.limits.memory._default }}
